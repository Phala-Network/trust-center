# DStack Verifier - Production Docker Compose
services:
  # PostgreSQL database for verification data storage
  postgres:
    image: postgres:17-alpine
    container_name: dstack-verifier-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-dstack_verifier}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-dstack_verifier}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Redis for queue management and caching
  redis:
    image: redis:7-alpine
    container_name: dstack-verifier-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password} --appendonly yes
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-redis_password}", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  # DStack Verifier Server
  server:
    build:
      context: .
      target: production
      dockerfile: Dockerfile
    container_name: dstack-verifier-server
    restart: unless-stopped
    environment:
      # Database configuration
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-dstack_verifier}
      
      # Redis configuration
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379
      
      # Application configuration
      NODE_ENV: production
      PORT: 3000
      
      # DStack configuration
      DSTACK_BASE_URL: ${DSTACK_BASE_URL:-https://api.base.org}
      DSTACK_KMS_CONTRACT: ${DSTACK_KMS_CONTRACT:-0x...}
      DSTACK_APP_CONTRACT: ${DSTACK_APP_CONTRACT:-0x...}
      
      # Queue configuration
      QUEUE_NAME: ${QUEUE_NAME:-verification-queue}
      QUEUE_CONCURRENCY: ${QUEUE_CONCURRENCY:-10}
      QUEUE_MAX_ATTEMPTS: ${QUEUE_MAX_ATTEMPTS:-3}
      QUEUE_BACKOFF_DELAY: ${QUEUE_BACKOFF_DELAY:-2000}
      
      # External service configuration (optional)
      R2_ENDPOINT: ${R2_ENDPOINT}
      R2_ACCESS_KEY_ID: ${R2_ACCESS_KEY_ID}
      R2_SECRET_ACCESS_KEY: ${R2_SECRET_ACCESS_KEY}
      R2_BUCKET: ${R2_BUCKET}
    ports:
      - "${APP_PORT:-3000}:3000"
    volumes:
      # Persistent storage for database migrations
      - ./drizzle:/app/drizzle
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000/health" ]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 30s

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  default:
    name: dstack-verifier-prod
    driver: bridge
