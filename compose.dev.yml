# DStack Verifier - Development Docker Compose
services:
  # PostgreSQL database for development
  postgres:
    image: postgres:17-alpine
    container_name: dstack-verifier-postgres-dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-dstack_verifier_dev}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_INITDB_ARGS: "--auth-host=trust"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-dstack_verifier_dev}" ]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 5s

  # Redis for development queue management
  redis:
    image: redis:7-alpine
    container_name: dstack-verifier-redis-dev
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-dev_password} --appendonly no
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data_dev:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-dev_password}", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 3s

  # DStack Verifier Server - Development
  server:
    build:
      context: .
      target: development
      dockerfile: src/server/dockerfile
    container_name: dstack-verifier-server-dev
    restart: unless-stopped
    # Development command with hot reload and Drizzle Studio
    command: [ 
      "sh", "-c", 
      "bun run db:studio --host 0.0.0.0 --port 4983 & bun run server:dev" 
    ]
    environment:
      # Database configuration
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-dstack_verifier_dev}
      
      # Redis configuration
      REDIS_URL: redis://:${REDIS_PASSWORD:-dev_password}@redis:6379
      
      # Development configuration
      NODE_ENV: development
      PORT: 3000
      
      # DStack configuration for development
      DSTACK_BASE_URL: ${DSTACK_BASE_URL:-https://api.base.org}
      DSTACK_KMS_CONTRACT: ${DSTACK_KMS_CONTRACT:-0x...}
      DSTACK_APP_CONTRACT: ${DSTACK_APP_CONTRACT:-0x...}
      
      # Queue configuration (lighter for development)
      QUEUE_NAME: ${QUEUE_NAME:-dev-verification-queue}
      QUEUE_CONCURRENCY: ${QUEUE_CONCURRENCY:-3}
      QUEUE_MAX_ATTEMPTS: ${QUEUE_MAX_ATTEMPTS:-2}
      QUEUE_BACKOFF_DELAY: ${QUEUE_BACKOFF_DELAY:-1000}
      
      # Development debugging
      DEBUG: ${DEBUG:-dstack:*}
      LOG_LEVEL: ${LOG_LEVEL:-debug}
      
      # External services (optional for development)
      R2_ENDPOINT: ${R2_ENDPOINT}
      R2_ACCESS_KEY_ID: ${R2_ACCESS_KEY_ID}
      R2_SECRET_ACCESS_KEY: ${R2_SECRET_ACCESS_KEY}
      R2_BUCKET: ${R2_BUCKET}
    ports:
      - "${APP_PORT:-3000}:3000"      # Main application
      - "${STUDIO_PORT:-4983}:4983"   # Drizzle Studio
    volumes:
      # Source code for hot reload
      - ./src:/app/src:rw
      - ./drizzle:/app/drizzle:rw
      - ./package.json:/app/package.json:ro
      - ./tsconfig.json:/app/tsconfig.json:ro
      - ./biome.json:/app/biome.json:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000/health" ]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 20s

volumes:
  postgres_data_dev:
    driver: local
  redis_data_dev:
    driver: local

networks:
  default:
    name: dstack-verifier-dev
    driver: bridge
