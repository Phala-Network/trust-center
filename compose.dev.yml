# DStack Verifier - Development Docker Compose
services:
  # PostgreSQL database for development
  postgres:
    image: postgres:17-alpine
    container_name: dstack-verifier-postgres-dev
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-dstack_verifier_dev}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_INITDB_ARGS: "--auth-host=trust"
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-dstack_verifier_dev}" ]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 5s

  # Redis for development queue management
  redis:
    image: redis:8-alpine
    container_name: dstack-verifier-redis-dev
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-dev_password} --appendonly no
    volumes:
      - redis_data_dev:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-dev_password}", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 3s

  # DStack Verifier Server - Development
  server:
    build:
      context: .
      dockerfile: Dockerfile
      platforms:
        - linux/amd64
      args:
        - BUILDKIT_INLINE_CACHE=1
    pull_policy: build
    container_name: dstack-verifier-server-dev
    restart: unless-stopped
    # Development command with migrations and hot reload
    command: [ "sh", "-c", "cd /app/packages/db && bun run migrate && cd /app/apps/server && bun run dev" ]
    volumes:
      # Persist downloaded dstack images across container restarts
      - dstack_images_dev:/app/packages/verifier/external/dstack-images
    environment:
      # Database configuration (server uses DATABASE_URL)
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-dstack_verifier_dev}

      # Redis configuration
      REDIS_URL: redis://:${REDIS_PASSWORD:-dev_password}@redis:6379

      # Application configuration
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${PORT:-3000}

      # Queue configuration (lighter for development)
      QUEUE_NAME: ${QUEUE_NAME:-dev-verification-queue}
      QUEUE_CONCURRENCY: ${QUEUE_CONCURRENCY:-20}
      QUEUE_MAX_ATTEMPTS: ${QUEUE_MAX_ATTEMPTS:-2}
      QUEUE_BACKOFF_DELAY: ${QUEUE_BACKOFF_DELAY:-1000}

      # Development debugging
      DEBUG: ${DEBUG:-dstack:*}
      LOG_LEVEL: ${LOG_LEVEL:-debug}

      # S3 Storage
      S3_ENDPOINT: ${S3_ENDPOINT}
      S3_ACCESS_KEY_ID: ${S3_ACCESS_KEY_ID}
      S3_SECRET_ACCESS_KEY: ${S3_SECRET_ACCESS_KEY}
      S3_BUCKET: ${S3_BUCKET}

      # Blockchain RPC URLs
      ETHEREUM_RPC_URL: ${ETHEREUM_RPC_URL:-}
      BASE_RPC_URL: ${BASE_RPC_URL:-}

      # Cron API (required)
      CRON_API_KEY: ${CRON_API_KEY}

      # Metabase sync (optional)
      METABASE_URL: ${METABASE_URL:-}
      METABASE_API_KEY: ${METABASE_API_KEY:-}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
  # Drizzle Gateway - Database Management UI
  drizzle-gateway:
    image: ghcr.io/drizzle-team/gateway:latest
    container_name: dstack-verifier-drizzle-gateway-dev
    restart: unless-stopped
    environment:
      DATABASE_URL_POSTGRES: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-dstack_verifier_dev}
      PORT: ${GATEWAY_PORT:-4983}
    volumes:
      - drizzle_gateway_dev:/app
    depends_on:
      postgres:
        condition: service_healthy

volumes:
  postgres_data_dev:
  redis_data_dev:
  drizzle_gateway_dev:
  dstack_images_dev:
